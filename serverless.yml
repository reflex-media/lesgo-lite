service: ${env:APP_NAME}

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-plugin-log-retention
  - serverless-dotenv-plugin

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: ${env:AWS_LAMBDA_MEMORY_SIZE}
  timeout: ${env:AWS_LAMBDA_TIMEOUT}
  stackName: ${self:service}-${self:provider.stage}
  apiName: ${self:provider.stackName}
  stage: ${opt:stage, 'local'}
  profile: ${env:AWS_ACCOUNT_PROFILE}
  region: ${opt:region, env:AWS_ACCOUNT_REGION}
  apiGateway:
    shouldStartNameWithService: true
    minimumCompressionSize: ${env:AWS_APIGATEWAY_MIN_COMPRESSION_SIZE, 100}
  # httpApi:
  #   authorizers:
  #     cognitoJWTAuthorizer:
  #       identitySource: $request.header.Authorization
  #       issuerUrl: https://cognito-idp.${self:provider.region}.amazonaws.com/${env:AWS_COGNITO_USER_POOL_ID}
  #       audience:
  #         - ${env:AWS_COGNITO_CLIENT_ID}
    cors: true
  vpc:
    securityGroupIds:
      - ${env:AWS_VPC_SECURITY_GROUP_ID}
    subnetIds:
      - ${env:AWS_VPC_SUBNET_1_ID}
      - ${env:AWS_VPC_SUBNET_2_ID}
      - ${env:AWS_VPC_SUBNET_3_ID}
      - ${env:AWS_VPC_SUBNET_4_ID}
  stackTags:
    SITE: ${self:service}
    PRODUCT: ${self:service}
    STAGE: ${self:provider.stage}
    datadog: monitored
    service: ${env:APP_NAME}
    env: ${self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: '*'
    - Effect: 'Allow'
      Action:
        - 'sqs:SendMessage'
        - 'sqs:ReceiveMessage'
        - 'sqs:DeleteMessage'
      Resource: 'arn:aws:sqs:${self:provider.region}:*:*'
    - Effect: 'Allow'
      Action:
        - 'secretsmanager:GetSecretValue'
      Resource:
        - ${env:DB_SECRET_ARN}
        - ${env:DB_SECRET_COMMAND_ARN}
    - Effect: 'Allow'
      Action:
        - 'rds-data:ExecuteStatement'
        - 'rds-data:BatchExecuteStatement'
      Resource: ${env:DB_RESOURCE_ARN}
    - Effect: 'Allow'
      Action:
        - 'dynamodb:Query'
        - 'dynamodb:GetItem'
        - 'dynamodb:PutItem'
        - 'dynamodb:UpdateItem'
        - 'dynamodb:BatchWriteItem'
        - 'dynamodb:BatchGetItem'
      Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.stackName}-*'

custom:
  path:
    app: src
    functions: config/functions
    resources: config/resources
  serverless-offline:
    port: 8888
    ignoreJWTSignature: true
  logRetentionInDays: ${env:AWS_LOG_RETENTION_DAYS, 7}
  dotenv:
    basePath: config/environments/

# Add all the functions here
functions:
  - ${file(${self:custom.path.functions}/utils.yml)}

# Add all the additional resources here
resources:
  # - ${file(${self:custom.path.resources}/sample-resource.yml)}
