#
# Resource file to create Application Load Balancer and other required resources
# i.e Public Subnet, Security Group, Elastic Ip, Route Table, etc
#
# @ref https://github.com/pharindoko/serverless-load-balancer/blob/master/serverless.yml
#
# Alternative way to avoid cors on ALB
# https://geeks.uniplaces.com/avoid-pre-flight-requests-with-aws-application-load-balancer-f8cc5198b2bd
#

Resources:
  #
  # Vpc - the network where ALB is sited.
  #
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: ${self:provider.stackName}-vpc

  #
  # Public Subnet where ALB is sited on.
  #
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ${env:VPC_PUBLIC_SUBNET_1_AZ}
      CidrBlock: 10.0.21.0/24
      Tags:
        - Key: Name
          Value: ${self:provider.stackName}-public-subnet-1
      VpcId:
        Ref: Vpc
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ${env:VPC_PUBLIC_SUBNET_2_AZ}
      CidrBlock: 10.0.22.0/24
      Tags:
        - Key: Name
          Value: ${self:provider.stackName}-public-subnet-2
      VpcId:
        Ref: Vpc
  #
  # Internet gateway, Elastic Ip, and Route table
  # attached to 2 Public Subnet required for public-facing ALB
  #
  Eip:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: ${self:provider.stackName}-eip-1
  Eip2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: ${self:provider.stackName}-eip-2
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: ${self:provider.stackName}-internet-gateway
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: Vpc
      InternetGatewayId:
        Ref: InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: ${self:provider.stackName}-public-route-table
      VpcId:
        Ref: Vpc
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  SubnetRouteTableAssociationPublic1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      RouteTableId:
        Ref: PublicRouteTable
  SubnetRouteTableAssociationPublic2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      RouteTableId:
        Ref: PublicRouteTable

  #
  # Security Group used by ALB
  # Allow port 443, 80
  #
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: ${self:provider.stackName}-security-group
      GroupDescription: 'HTTPS/HTTPS inbound; Nothing outbound'
      VpcId: { Ref: Vpc }
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: '1'
          ToPort: '1'
          CidrIp: 127.0.0.1/32
      Tags:
        - Key: Name
          Value: ${self:provider.stackName}-security-group

  #
  # ALB with default 404 HTTP listener
  #
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Type: 'application'
      Name: ${self:provider.stackName}-elb
      IpAddressType: 'ipv4'
      Scheme: 'internet-facing'
      LoadBalancerAttributes:
        - { Key: 'deletion_protection.enabled', Value: false }
        - { Key: 'routing.http2.enabled', Value: false }
        - { Key: 'access_logs.s3.enabled', Value: false }
      SecurityGroups:
        - { Ref: SecurityGroup }
      # Subnet has to be public for internet facing ALB
      Subnets:
        - { Ref: PublicSubnet1 }
        - { Ref: PublicSubnet2 }
      Tags:
        - Key: Name
          Value: ${self:provider.stackName}-elb
  HTTPListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: { Ref: LoadBalancer }
      Port: 80
      Protocol: 'HTTP'
      DefaultActions:
        - Type: 'fixed-response'
          Order: 1
          FixedResponseConfig:
            StatusCode: 404
            ContentType: 'application/json'
            MessageBody: '{ "not": "found" }'
